{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Player.svelte",
    "../../Card.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import Player from \"./Player.svelte\";\n    import Card from \"./Card.svelte\";\n\n    let players = [];\n    addPlayer();\n    addPlayer();\n    let selectedPlayer = 0;\n\n    function addPlayer() {\n        const newPlayer = {\n            name: `Player ${players.length + 1}`,\n            cards: {25: 0, 50: 0, 75: 0, 100: 0, 200: 0},\n        };\n        players = [...players, newPlayer];\n    }\n\n    function removePlayer() {\n        if (players.length >= 3) {\n            players = players.slice(0, -1);\n        }\n\t}\n\n\tfunction newGame() {\n        for (let player of players) {\n            player.cards = {25: 0, 50: 0, 75: 0, 100: 0, 200: 0};\n        }\n        players = players;\n    }\n\n\tfunction selectPlayer(i) {\n        selectedPlayer = i;\n    }\n\tfunction addCard(value) {\n        players[selectedPlayer].cards[value] += 1;\n    }\n\n</script>\n\n<style>\n    main {\n        max-width: 600px;\n        margin: auto;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n    }\n\n    #buttons {\n        margin: 5px 0;\n    }\n\n    #cards {\n        display: flex;\n        flex-direction: row;\n    }\n</style>\n\n<main>\n\t<div id=\"buttons\">\n\t\t<button on:click={addPlayer}>Add Player</button>\n\t\t<button on:click={removePlayer}>Remove Player</button>\n        <button on:click={newGame}>New Game</button>\n\t</div>\n    <div id=\"cards\">\n        <div><Card value=\"25\" on:click={() => addCard(25)}/></div>\n        <div><Card value=\"50\" on:click={() => addCard(50)}/></div>\n        <div><Card value=\"75\" on:click={() => addCard(75)}/></div>\n        <div><Card value=\"100\" on:click={() => addCard(100)}/></div>\n        <div><Card value=\"200\" on:click={() => addCard(200)}/></div>\n    </div>\n    <div id=\"players\">\n        {#each players as player, i}\n            <Player\n                    name={player.name}\n                    selected={selectedPlayer === i}\n                    bind:cards={player.cards}\n                    on:click={() => selectPlayer(i)} />\n        {/each}\n    </div>\n</main>",
    "<script>\n    import Card from \"./Card.svelte\";\n    import {createEventDispatcher} from \"svelte\";\n\n    export let name;\n    export let selected;\n    export let cards;\n    const dispatch = createEventDispatcher();\n    let score;\n    $: {\n        score = 0;\n        for (let value in cards) {\n            score += value * cards[value];\n        }\n    }\n\n    function removeCard(value) {\n        if (!selected) {\n            dispatch('click');\n        } else {\n            cards[value] -= 1;\n        }\n    }\n\n    function editName() {\n        console.log(\"edit\");\n    }\n</script>\n\n<style>\n    .player {\n        margin: 10px 0;\n        padding: 5px;\n        border: 3px solid #CEE4F2;\n        border-radius: 10px;\n        background-color: var(--light-blue-color);\n    }\n\n    .player.selected {\n        border-color: black;\n        box-shadow: 3px 3px 3px var(--black-color);\n    }\n\n    .name {\n        font-size: 24pt;\n        display: inline-block;\n    }\n\n    .cards {\n        display: flex;\n        flex-direction: row;\n        min-height: 200px;\n    }\n\n    .cards .column {\n        display: flex;\n        flex-direction: column;\n        width: 110px;\n    }\n\n    .track {\n        position: relative;\n        display: flex;\n        width: 100%;\n        height: 40px;\n        margin-top: 10px;\n        border: 1px black solid;\n        background-color: #d1d1d1;\n    }\n\n    .track hr {\n        position: absolute;\n        top: 20px;\n        border:none;\n        border-top:5px dashed #fff;\n        width:100%;\n    }\n\n    .covered {\n        height: 100%;\n        background-color: var(--light-green-color);\n    }\n\n    .distance {\n        font-size: 20pt;\n        position: absolute;\n        top: 0;\n        width: 100%;\n        text-align: center;\n    }\n</style>\n\n<div class=\"player{selected ? ' selected' : ''}\" on:click>\n    <div class=\"name\" contenteditable=\"true\">{name}</div>\n    <div class=\"cards\">\n        {#each Object.keys(cards) as value}\n            <div class=\"column\">\n                {#each Array(cards[value]).fill(0) as _}\n                    <Card value={value} on:click={() => removeCard(value)}/>\n                {/each}\n            </div>\n        {/each}\n    </div>\n    <div class=\"track\">\n        <div class=\"covered\" style={`width: ${score / 10}%`}></div>\n        <hr>\n        <div class=\"distance\">{score} km</div>\n    </div>\n</div>",
    "<script>\n    import {createEventDispatcher} from \"svelte\";\n\n    export let value;\n    const dispatch = createEventDispatcher();\n\n    function clickCard() {\n        dispatch('clickCard', {value: value});\n    }\n</script>\n\n<style>\n    .card {\n        width: 100px;\n        margin: 0 5px;\n    }\n\n    .card:not(:last-child) {\n        margin-bottom: -120px;\n    }\n\n    .container {\n        position: relative;\n        height: 0;\n        width: 100%;\n        padding-bottom: 142.86%;\n    }\n\n    .inner {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-size: cover;\n        border: 1px black solid;\n        border-radius: 10px;\n        box-shadow: 3px 3px 3px var(--black-color);\n    }\n\n</style>\n<div class=\"card\">\n    <div class=\"container\">\n        <div\n                class=\"inner\"\n                style=\"background-image: url(images/distance{value}.png)\"\n                on:click>\n        </div>\n    </div>\n</div>"
  ],
  "names": [],
  "mappings": "AAwCI,IAAI,cAAC,CAAC,AACF,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,AAC3B,CAAC,AAED,QAAQ,cAAC,CAAC,AACN,MAAM,CAAE,GAAG,CAAC,CAAC,AACjB,CAAC,AAED,MAAM,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,AACvB,CAAC;AC1BD,OAAO,8BAAC,CAAC,AACL,MAAM,CAAE,IAAI,CAAC,CAAC,CACd,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,IAAI,CACnB,gBAAgB,CAAE,IAAI,kBAAkB,CAAC,AAC7C,CAAC,AAED,OAAO,SAAS,8BAAC,CAAC,AACd,YAAY,CAAE,KAAK,CACnB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,aAAa,CAAC,AAC9C,CAAC,AAED,KAAK,8BAAC,CAAC,AACH,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,YAAY,AACzB,CAAC,AAED,MAAM,8BAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,UAAU,CAAE,KAAK,AACrB,CAAC,AAED,qBAAM,CAAC,OAAO,eAAC,CAAC,AACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,KAAK,CAAE,KAAK,AAChB,CAAC,AAED,MAAM,8BAAC,CAAC,AACJ,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,gBAAgB,CAAE,OAAO,AAC7B,CAAC,AAED,qBAAM,CAAC,EAAE,eAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,OAAO,IAAI,CACX,WAAW,GAAG,CAAC,MAAM,CAAC,IAAI,CAC1B,MAAM,IAAI,AACd,CAAC,AAED,QAAQ,8BAAC,CAAC,AACN,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,IAAI,mBAAmB,CAAC,AAC9C,CAAC,AAED,SAAS,8BAAC,CAAC,AACP,SAAS,CAAE,IAAI,CACf,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,AACtB,CAAC;AC7ED,KAAK,cAAC,CAAC,AACH,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,CAAC,CAAC,GAAG,AACjB,CAAC,AAED,mBAAK,KAAK,WAAW,CAAC,AAAC,CAAC,AACpB,aAAa,CAAE,MAAM,AACzB,CAAC,AAED,UAAU,cAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,CAAC,CACT,KAAK,CAAE,IAAI,CACX,cAAc,CAAE,OAAO,AAC3B,CAAC,AAED,MAAM,cAAC,CAAC,AACJ,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,KAAK,CACtB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,aAAa,CAAC,AAC9C,CAAC"
}