{"version":3,"sources":["app.jsx"],"names":[],"mappings":"AAAA,IAAI,cAAc,IAAI,GAAJ,EAAlB;;AAEA,MAAM,iBAAiB,SAAS;AAC5B,UAAM,CAAC,UAAD,EAAa,aAAb,IAA8B,MAAM,QAAN,CAAe,MAAM,EAAN,EAAU,IAAV,CAAe,SAAf,CAAf,CAApC;AACA,UAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,MAAM,QAAN,CAAe,EAAf,EAAmB,IAAnB,CAAwB,KAAxB,CAAlC;AACA,UAAM,CAAC,MAAD,EAAS,SAAT,IAAsB,MAAM,QAAN,CAAe,SAAf,CAA5B;AACA,UAAM,QAAQ,MAAM,MAAN,CAAa,EAAb,CAAd;;AAEA,UAAM,SAAS,MAAM,WAAW,SAAhC;AACA,UAAM,OAAO,MAAM,aAAa,WAAW,GAAX,CAAe,KAAK,MAAM,SAA1B,CAAb,CAAnB;AACA,UAAM,SAAS,MAAM,aAAa,MAAM,EAAN,EAAU,IAAV,CAAe,KAAf,CAAb,CAArB;AACA,UAAM,QAAQ,MAAM;AAChB,YAAI,QAAJ,EAAc;AACV;AACA,gBAAI,YAAY,IAAI,MAAJ,CAAW,aAAX,CAAhB;AACA,sBAAU,WAAV,CAAsB,EAAC,SAAS,OAAV,EAAmB,QAAQ,UAA3B,EAAtB;;AAEA,sBAAU,SAAV,GAAsB,SAAS;AAC3B,oBAAI,MAAM,IAAN,KAAe,SAAnB,EAA8B;AAC1B,kCAAc,MAAM,IAApB;AACH;AACD,uBAAO,SAAP;AACA,0BAAU,SAAV;AACH,aAND;AAOA,sBAAU,SAAV;AACH,SAbD,MAaO;AACH;AACA,mBAAO,SAAP;AACA,sBAAU,SAAV;AACH;AACJ,KAnBD;;AAqBA;;;;AAIA,UAAM,WAAW,MAAM;AACnB,YAAI,QAAJ,EAAc;AACV;AACA,gBAAI,YAAY,IAAI,MAAJ,CAAW,aAAX,CAAhB;AACA,sBAAU,WAAV,CAAsB,EAAC,SAAS,UAAV,EAAtB;;AAEA,sBAAU,SAAV,GAAsB,SAAS;AAC3B,oBAAI,MAAM,IAAN,KAAe,SAAnB,EAA8B;AAC1B,kCAAc,MAAM,IAApB;AACA,iCAAa,MAAM,IAAN,CAAW,GAAX,CAAe,KAAK,MAAM,SAA1B,CAAb;AACH;AACD,uBAAO,SAAP;AACA,0BAAU,SAAV;AACH,aAPD;AAQA,sBAAU,SAAV;AACH,SAdD,MAcO;AACH;AACA,mBAAO,SAAP;AACA,sBAAU,SAAV;AACH;AACJ,KApBD;;AAsBA;;;AAGA,UAAM,QAAQ,MAAM;AAChB,YAAI,QAAJ,EAAc;AACV,0BAAc,WAAW,GAAX,CAAe,CAAC,CAAD,EAAI,CAAJ,KAAU,UAAU,CAAV,IAAe,CAAf,GAAmB,SAA5C,CAAd;AACH;AACD,aAAK,IAAI,IAAT,IAAiB,KAAjB,EAAwB;AACpB,iBAAK,QAAL,CAAc,EAAE,OAAO,MAAM,CAAN,EAAS,IAAT,CAAc,KAAd,CAAT,EAAd;AACH;AACJ,KAPD;;AASA,UAAM,kBAAkB,CAAC,KAAD,EAAQ,KAAR,KAAkB;AACtC,YAAI,CAAC,UAAU,KAAV,CAAL,EAAuB;AACnB,gBAAI,SAAS,CAAC,GAAG,UAAJ,CAAb;AACA,mBAAO,KAAP,IAAgB,KAAhB;AACA,0BAAc,MAAd;AACH;AACJ,KAND;;AAQA,WACI;AAAA;AAAA;AACI;AAAA;AAAA,cAAK,WAAU,MAAf,EAAsB,UAAS,GAA/B;AACM,uBAAW,GAAX,CAAe,CAAC,CAAD,EAAI,CAAJ,KACb,oBAAC,QAAD;AACI,qBAAK,CADT;AAEI,uBAAO,CAFX;AAGI,uBAAO,CAHX;AAII,0BAAU,UAAU,CAAV,CAJd;AAKI,0BAAU,KAAK,gBAAgB,CAAhB,EAAmB,CAAnB,CALnB;AAMI,4BAAa,KAAD,IAAW,MAAM,OAAN,CAAc,CAAd,IAAmB;AAN9C,cADF;AADN,SADJ;AAaI;AAAA;AAAA,cAAK,IAAG,SAAR;AACI;AAAA;AAAA,kBAAQ,SAAS,QAAjB;AAA4B,2BAAW,UAAX,GAAwB;AAApD,aADJ;AAEI;AAAA;AAAA,kBAAQ,SAAS,KAAjB;AAAA;AAAA,aAFJ;AAGI;AAAA;AAAA,kBAAQ,SAAS,KAAjB;AAAyB,2BAAW,OAAX,GAAqB;AAA9C,aAHJ;AAII;AAAA;AAAA,kBAAQ,SAAS,IAAjB;AAAA;AAAA,aAJJ;AAKI;AAAA;AAAA,kBAAQ,SAAS,MAAjB;AAAA;AAAA;AALJ;AAbJ,KADJ;AAuBH,CAnGD;;AAqGA,MAAM,UAAN,SAAyB,MAAM,SAA/B,CAAyC;AACrC,gBAAY,KAAZ,EAAmB;AACf,cAAM,KAAN;AACA,aAAK,KAAL,GAAa;AACT,wBAAY,MAAM,EAAN,EAAU,IAAV,CAAe,SAAf,CADH;AAET,uBAAW,MAAM,EAAN,EAAU,IAAV,CAAe,KAAf,CAFF;AAGT,oBAAQ;AAHC,SAAb;AAKA,aAAK,KAAL,GAAa,EAAb;AACH;;AAED,aAAS;AACL,eAAO,KAAK,KAAL,CAAW,MAAX,KAAsB,SAA7B;AACH;;AAED;;;AAGA,WAAO;AACH,aAAK,QAAL,CAAc;AACV,uBAAW,KAAK,KAAL,CAAW,UAAX,CAAsB,GAAtB,CAA0B,KAAK,MAAM,SAArC;AADD,SAAd;AAGH;;AAED;;;AAGA,aAAS;AACL,aAAK,QAAL,CAAc;AACV,uBAAW,MAAM,EAAN,EAAU,IAAV,CAAe,KAAf;AADD,SAAd;AAGH;;AAED;;;;AAIA,YAAQ;AACJ,YAAI,KAAK,MAAL,EAAJ,EAAmB;AACf;AACA,gBAAI,SAAS,IAAI,MAAJ,CAAW,aAAX,CAAb;AACA,mBAAO,WAAP,CAAmB;AACf,yBAAS,OADM;AAEf,wBAAQ,KAAK,KAAL,CAAW,UAFJ,EAAnB;;AAIA,mBAAO,SAAP,GAAmB,SAAS;AACxB,oBAAI,MAAM,IAAN,KAAe,SAAnB,EAA8B;AAC1B,yBAAK,QAAL,CAAc;AACV,oCAAY,MAAM;AADR,qBAAd;AAGH;AACD,qBAAK,KAAL,CAAW,MAAX,CAAkB,SAAlB;AACA,qBAAK,QAAL,CAAc,EAAE,QAAQ,SAAV,EAAd;AACH,aARD;AASA,iBAAK,QAAL,CAAc,EAAE,QAAQ,MAAV,EAAd;AACH,SAjBD,MAiBO;AACH;AACA,iBAAK,KAAL,CAAW,MAAX,CAAkB,SAAlB;AACA,iBAAK,QAAL,CAAc,EAAE,QAAQ,SAAV,EAAd;AACH;AACJ;;AAED;;;;AAIA,eAAW;AACP,YAAI,KAAK,MAAL,EAAJ,EAAmB;AACf;AACA,gBAAI,SAAS,IAAI,MAAJ,CAAW,aAAX,CAAb;AACA,mBAAO,WAAP,CAAmB;AACf,yBAAS,UADM,EAAnB;;AAGA,mBAAO,SAAP,GAAmB,SAAS;AACxB,oBAAI,MAAM,IAAN,KAAe,SAAnB,EAA8B;AAC1B,yBAAK,QAAL,CAAc;AACV,oCAAY,MAAM,IADR;AAEV,mCAAW,MAAM,IAAN,CAAW,GAAX,CAAe,KAAK,MAAM,SAA1B;AAFD,qBAAd;AAIH;AACD,qBAAK,KAAL,CAAW,MAAX,CAAkB,SAAlB;AACA,qBAAK,QAAL,CAAc,EAAC,QAAQ,SAAT,EAAd;AACH,aATD;;AAWA,iBAAK,QAAL,CAAc,EAAC,QAAQ,MAAT,EAAd;AACH,SAlBD,MAkBO;AACH;AACA,iBAAK,KAAL,CAAW,MAAX,CAAkB,SAAlB;AACA,iBAAK,QAAL,CAAc,EAAE,QAAQ,SAAV,EAAd;AACH;AACJ;;AAED;;;AAGA,YAAQ;AACJ,YAAI,KAAK,MAAL,EAAJ,EAAmB;AACf,iBAAK,QAAL,CAAc;AACV,4BAAY,KAAK,KAAL,CAAW,UAAX,CAAsB,GAAtB,CAA0B,CAAC,CAAD,EAAI,CAAJ,KAAU,KAAK,KAAL,CAAW,SAAX,CAAqB,CAArB,IAA0B,CAA1B,GAA8B,SAAlE;AADF,aAAd;AAGH;AACD,aAAK,IAAI,IAAT,IAAiB,KAAK,KAAtB,EAA6B;AACzB,iBAAK,QAAL,CAAc;AACV,uBAAO,MAAM,CAAN,EAAS,IAAT,CAAc,KAAd;AADG,aAAd;AAGH;AACJ;;AAED,aAAS;AACL,eACI;AAAA;AAAA;AACA;AAAA;AAAA,kBAAK,WAAU,MAAf,EAAsB,UAAS,GAA/B;AACM,qBAAK,KAAL,CAAW,UAAX,CAAsB,GAAtB,CAA0B,CAAC,CAAD,EAAI,CAAJ,KACxB,oBAAC,IAAD;AACI,yBAAK,CADT;AAEI,2BAAO,CAFX;AAGI,2BAAO,CAHX;AAII,8BAAU,KAAK,KAAL,CAAW,SAAX,CAAqB,CAArB,CAJd;AAKI,8BAAU,KAAK,KAAK,YAAL,CAAkB,CAAlB,EAAqB,CAArB,CALnB;AAMI,yBAAM,KAAD,IAAW,KAAK,KAAL,CAAW,CAAX,IAAgB;AANpC,kBADF;AADN,aADA;AAaA;AAAA;AAAA,kBAAK,IAAG,SAAR;AACI;AAAA;AAAA,sBAAQ,SAAS,MAAM,KAAK,QAAL,EAAvB;AAAyC,yBAAK,MAAL,KAAgB,UAAhB,GAA6B;AAAtE,iBADJ;AAEI;AAAA;AAAA,sBAAQ,SAAS,MAAM,KAAK,KAAL,EAAvB;AAAA;AAAA,iBAFJ;AAGI;AAAA;AAAA,sBAAQ,SAAS,MAAM,KAAK,KAAL,EAAvB;AAAsC,yBAAK,MAAL,KAAgB,OAAhB,GAA0B;AAAhE,iBAHJ;AAII;AAAA;AAAA,sBAAQ,SAAS,MAAM,KAAK,IAAL,EAAvB;AAAA;AAAA,iBAJJ;AAKI;AAAA;AAAA,sBAAQ,SAAS,MAAM,KAAK,MAAL,EAAvB;AAAA;AAAA;AALJ;AAbA,SADJ;AAuBH;;AAED,iBAAa,KAAb,EAAoB,KAApB,EAA2B;AACvB,YAAI,CAAC,KAAK,KAAL,CAAW,SAAX,CAAqB,KAArB,CAAL,EAAkC;AAC9B,gBAAI,SAAS,CAAC,GAAG,KAAK,KAAL,CAAW,UAAf,CAAb;AACA,mBAAO,KAAP,IAAgB,KAAhB;AACA,iBAAK,QAAL,CAAc,EAAC,YAAY,MAAb,EAAd;AACH;AACJ;AA5IoC;;AA+IzC,MAAM,WAAW,SAAS;AACtB,UAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,MAAM,QAAN,CAAe,MAAM,CAAN,EAAS,IAAT,CAAc,KAAd,CAAf,CAA1B;;AAEA,QAAI,eAAe,SAAnB;AACA,QAAI,eAAe,SAAnB;;AAEA,UAAM,oBAAoB,MAAM;AAC5B,qBAAa,YAAb;AACA,uBAAe,SAAf;AACH,KAHD;;AAKA,UAAM,gBAAgB,CAAC,KAAD,EAAQ,KAAR,KAAkB;AACpC,YAAI,CAAC,MAAM,QAAX,EAAqB;AACjB,gBAAI,iBAAiB,SAArB,EAAgC;AAC5B;AACH;AACD,2BAAe,WAAW,MAAM;AAC5B,wBAAQ,GAAR,CAAY,YAAZ;AACA,sBAAM,QAAN,CAAe,YAAf;AACA;AACH,aAJc,EAIZ,GAJY,CAAf;AAKA,2BAAe,KAAf;AACH;AACJ,KAZD;;AAcA,UAAM,cAAc,CAAC,KAAD,EAAQ,KAAR,KAAkB;AAClC,YAAI,iBAAiB,SAArB,EAAgC;AAC5B;AACA,gBAAI,WAAW,MAAM,IAAN,CAAW,KAAX,CAAf;AACA,qBAAS,KAAT,IAAkB,CAAC,SAAS,KAAT,CAAnB;AACA,qBAAS,QAAT;AACH;AACJ,KAPD;;AASA,UAAM,iBAAkB,KAAD,IAAW,mBAAlC;;AAEA,QAAI,MAAM,CAAC,EAAE,MAAM,KAAN,GAAc,CAAhB,CAAX;AACA,QAAI,MAAM,MAAM,KAAN,GAAc,CAAxB;AACA,QAAI,OAAO,IAAI,CAAC,EAAE,MAAM,CAAR,CAAL,GAAkB,CAAC,EAAE,MAAM,CAAR,CAA9B;AACA,QAAI,UAAU,CAAC,MAAD,EAAU,IAAG,GAAI,EAAjB,EAAqB,IAAG,GAAI,EAA5B,EAAgC,IAAG,IAAK,EAAxC,CAAd;AACA,QAAI,MAAM,QAAV,EAAoB,QAAQ,IAAR,CAAa,QAAb;AACpB,QAAI,aAAa,EAAjB;AACA,QAAI,MAAM,KAAN,KAAgB,SAApB,EAA+B;AAC3B,aAAK,IAAI,IAAI,CAAb,EAAgB,KAAK,CAArB,EAAwB,GAAxB,EAA6B;AACzB,uBAAW,IAAX,CACI;AAAA;AAAA;AACI,+BAAU,OADd;AAEI,iCAAa,KAAK,cAAc,CAAd,EAAiB,CAAjB,CAFtB;AAGI,kCAAc,MAAM,gBAHxB;AAII,+BAAW,KAAK,YAAY,CAAZ,EAAe,CAAf,CAJpB;AAKI,mCAAe,KAAK,cAAc,CAAd,EAAiB,CAAjB,CALxB;AAMI,oCAAgB,MAAM,gBAN1B;AAOI,iCAAa,KAAK,YAAY,CAAZ,EAAe,CAAf,CAPtB;AAQI,yBAAK,CART;AASK,sBAAM,CAAN,IAAW,CAAX,GAAe;AATpB,aADJ;AAYH;AACJ;AACD,WACI;AAAA;AAAA,UAAK,WAAW,QAAQ,IAAR,CAAa,GAAb,CAAhB;AACI;AAAA;AAAA;AACI,2BAAU,KADd;AAEI,8BAAc,MAAM;AAAC,0BAAM,QAAN,CAAe,SAAf;AAA0B,iBAFnD;AAGI,6BAAa,MAAM;AAAC,0BAAM,QAAN,CAAe,SAAf;AAA0B,iBAHlD;AAIM,kBAAM;AAJZ,SADJ;AAOM;AAPN,KADJ;AAWH,CArED;;AAuEA,MAAM,IAAN,SAAmB,MAAM,SAAzB,CAAmC;AAC/B,gBAAY,KAAZ,EAAmB;AACf,cAAM,KAAN;AACA,aAAK,KAAL,GAAa;AACT,mBAAO,MAAM,CAAN,EAAS,IAAT,CAAc,KAAd;AADE,SAAb;AAGA,aAAK,YAAL,GAAoB,SAApB;AACA,aAAK,YAAL,GAAoB,SAApB;AACH;;AAED,aAAS;AACL,YAAI,MAAM,CAAC,EAAE,KAAK,KAAL,CAAW,KAAX,GAAmB,CAArB,CAAX;AACA,YAAI,MAAM,KAAK,KAAL,CAAW,KAAX,GAAmB,CAA7B;AACA,YAAI,OAAO,IAAI,CAAC,EAAE,MAAM,CAAR,CAAL,GAAkB,CAAC,EAAE,MAAM,CAAR,CAA9B;AACA,YAAI,UAAU,CAAC,MAAD,EAAU,IAAG,GAAI,EAAjB,EAAqB,IAAG,GAAI,EAA5B,EAAgC,IAAG,IAAK,EAAxC,CAAd;AACA,YAAI,KAAK,KAAL,CAAW,QAAf,EAAyB,QAAQ,IAAR,CAAa,QAAb;AACzB,YAAI,aAAa,EAAjB;AACA,YAAI,KAAK,KAAL,CAAW,KAAX,KAAqB,SAAzB,EAAoC;AAChC,iBAAK,IAAI,IAAI,CAAb,EAAgB,KAAK,CAArB,EAAwB,GAAxB,EAA6B;AACzB,2BAAW,IAAX,CACI;AAAA;AAAA;AACI,mCAAU,OADd;AAEI,qCAAa,KAAK,KAAK,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,CAFtB;AAGI,sCAAc,MAAM,KAAK,cAAL,EAHxB;AAII,mCAAW,KAAK,KAAK,WAAL,CAAiB,CAAjB,EAAoB,CAApB,CAJpB;AAKI,uCAAe,KAAK,KAAK,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,CALxB;AAMI,wCAAgB,MAAM,KAAK,cAAL,EAN1B;AAOI,qCAAa,KAAK,KAAK,WAAL,CAAiB,CAAjB,EAAoB,CAApB;AAClB;AACA;AATJ,0BAUI,KAAK,CAVT;AAWK,yBAAK,KAAL,CAAW,KAAX,CAAiB,CAAjB,IAAsB,CAAtB,GAA0B;AAX/B,iBADJ;AAcH;AACJ;AACD,eACI;AAAA;AAAA,cAAK,WAAW,QAAQ,IAAR,CAAa,GAAb,CAAhB;AACI;AAAA;AAAA;AACI,+BAAU,KADd;AAEI,kCAAc,MAAM;AAAC,6BAAK,KAAL,CAAW,QAAX,CAAoB,SAApB;AAA+B,qBAFxD;AAGI,iCAAa,MAAM;AAAC,6BAAK,KAAL,CAAW,QAAX,CAAoB,SAApB;AAA+B,qBAHvD;AAIM,qBAAK,KAAL,CAAW;AAJjB,aADJ;AAOM;AAPN,SADJ;AAWH;;AAED,wBAAoB;AAChB,qBAAa,KAAK,YAAlB;AACA,aAAK,YAAL,GAAoB,SAApB;AACH;;AAED,kBAAc,KAAd,EAAqB,KAArB,EAA4B;AACxB,YAAI,CAAC,KAAK,KAAL,CAAW,QAAhB,EAA0B;AACtB,gBAAI,KAAK,YAAL,KAAsB,SAA1B,EAAqC;AACjC,qBAAK,iBAAL;AACH;AACD,iBAAK,YAAL,GAAoB,WAAW,MAAM;AACjC,wBAAQ,GAAR,CAAY,KAAK,YAAjB;AACA,qBAAK,KAAL,CAAW,QAAX,CAAoB,KAAK,YAAzB;AACA,qBAAK,iBAAL;AACH,aAJmB,EAIjB,GAJiB,CAApB;AAKA,iBAAK,YAAL,GAAoB,KAApB;AACH;AACJ;;AAED,gBAAY,KAAZ,EAAmB,KAAnB,EAA0B;AACtB,YAAI,KAAK,YAAL,KAAsB,SAA1B,EAAqC;AACjC,iBAAK,iBAAL;AACA,gBAAI,QAAQ,MAAM,IAAN,CAAW,KAAK,KAAL,CAAW,KAAtB,CAAZ;AACA,kBAAM,KAAN,IAAe,CAAC,MAAM,KAAN,CAAhB;AACA,iBAAK,QAAL,CAAc,EAAC,OAAO,KAAR,EAAd;AACH;AACJ;;AAED,mBAAe,KAAf,EAAsB;AAClB,aAAK,iBAAL;AACH;AA9E8B;;AAiFnC,OAAO,aAAP,GAAuB,UAAS,KAAT,EAAgB;AACnC,UAAM,cAAN;AACA,UAAM,eAAN;AACA,WAAO,KAAP;AACH,CAJD;;AAMA,SAAS,gBAAT,CAA0B,SAA1B,EAAqC,SAAS;AAAE,gBAAY,GAAZ,CAAgB,MAAM,GAAtB;AAA6B,CAA7E;AACA,SAAS,gBAAT,CAA0B,OAA1B,EAAmC,SAAS;AAAE,gBAAY,MAAZ,CAAmB,MAAM,GAAzB;AAAgC,CAA9E;;AAEA,SAAS,MAAT,CACI,oBAAC,cAAD,OADJ,EAEI,SAAS,cAAT,CAAwB,KAAxB,CAFJ","file":"app.js","sourcesContent":["let pressedKeys = new Set();\n\nconst SudokuGridHook = props => {\n    const [cellValues, setCellValues] = React.useState(Array(81).fill(undefined));\n    const [cellLocks, setCellLocks] = React.useState(81).fill(false);\n    const [worker, setWorker] = React.useState(undefined);\n    const cells = React.useRef([]);\n\n    const isIdle = () => worker === undefined;\n    const lock = () => setCellLocks(cellValues.map(v => v !== undefined));\n    const unlock = () => setCellLocks(Array(81).fill(false));\n    const solve = () => {\n        if (isIdle()) {\n            // start a new computation with a webworker\n            let newWorker = new Worker('./solver.js');\n            newWorker.postMessage({command: \"solve\", values: cellValues});\n\n            newWorker.onmessage = event => {\n                if (event.data !== undefined) {\n                    setCellValues(event.data);\n                }\n                worker.terminate();\n                setWorker(undefined);\n            };\n            setWorker(newWorker);\n        } else {\n            // stop current computation\n            worker.terminate();\n            setWorker(undefined);\n        }\n    };\n\n    /**\n     * Solve the grid with current values\n     * This method calls a Webworker in the background to run the search algorithm\n     */\n    const generate = () => {\n        if (isIdle()) {\n            // start a new computation with a webworker\n            let newWorker = new Worker('./solver.js');\n            newWorker.postMessage({command: \"generate\"});\n\n            newWorker.onmessage = event => {\n                if (event.data !== undefined) {\n                    setCellValues(event.data);\n                    setCellLocks(event.data.map(v => v !== undefined));\n                }\n                worker.terminate();\n                setWorker(undefined);\n            };\n            setWorker(newWorker);\n        } else {\n            // stop current computation\n            worker.terminate();\n            setWorker(undefined);\n        }\n    };\n\n    /**\n     * Unset the value for all unlocked cells\n     */\n    const clear = () => {\n        if (isIdle()) {\n            setCellValues(cellValues.map((v, i) => cellLocks[i] ? v : undefined));\n        }\n        for (let cell of cells) {\n            cell.setState({ small: Array(9).fill(false) });\n        }\n    };\n\n    const changeCellValue = (index, value) => {\n        if (!cellLocks[index]) {\n            let values = [...cellValues];\n            values[index] = value;\n            setCellValues(values);\n        }\n    };\n\n    return (\n        <div>\n            <div className=\"grid\" tabIndex=\"0\">\n                { cellValues.map((v, i) =>\n                    <CellHook\n                        key={i}\n                        index={i}\n                        value={v}\n                        isLocked={cellLocks[i]}\n                        setValue={v => changeCellValue(i, v)}\n                        forwardRef={(input) => cells.current[i] = input}\n                    />\n                )}\n            </div>\n            <div id=\"buttons\">\n                <button onClick={generate}>{isIdle() ? \"Generate\" : \"Stop\"}</button>\n                <button onClick={clear}>Clear</button>\n                <button onClick={solve}>{isIdle() ? \"Solve\" : \"Stop\"}</button>\n                <button onClick={lock}>Lock</button>\n                <button onClick={unlock}>Unlock</button>\n            </div>\n        </div>\n    );\n};\n\nclass SudokuGrid extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cellValues: Array(81).fill(undefined),\n            cellLocks: Array(81).fill(false),\n            worker: undefined,\n        };\n        this.cells = [];\n    }\n\n    isIdle() {\n        return this.state.worker === undefined;\n    }\n\n    /**\n     * Mark all cells that have a value as locked\n     */\n    lock() {\n        this.setState({\n            cellLocks: this.state.cellValues.map(v => v !== undefined),\n        });\n    }\n\n    /**\n     * Mark all cells as unlocked\n     */\n    unlock() {\n        this.setState({\n            cellLocks: Array(81).fill(false),\n        });\n    }\n\n    /**\n     * Solve the grid with current values\n     * This method calls a Webworker in the background to run the search algorithm\n     */\n    solve() {\n        if (this.isIdle()) {\n            // start a new computation with a webworker\n            let worker = new Worker('./solver.js');\n            worker.postMessage({\n                command: \"solve\",\n                values: this.state.cellValues});\n\n            worker.onmessage = event => {\n                if (event.data !== undefined) {\n                    this.setState({\n                        cellValues: event.data,\n                    });\n                }\n                this.state.worker.terminate();\n                this.setState({ worker: undefined })\n            };\n            this.setState({ worker: worker });\n        } else {\n            // stop current computation\n            this.state.worker.terminate();\n            this.setState({ worker: undefined });\n        }\n    };\n\n    /**\n     * Solve the grid with current values\n     * This method calls a Webworker in the background to run the search algorithm\n     */\n    generate() {\n        if (this.isIdle()) {\n            // start a new computation with a webworker\n            let worker = new Worker('./solver.js');\n            worker.postMessage({\n                command: \"generate\"});\n\n            worker.onmessage = event => {\n                if (event.data !== undefined) {\n                    this.setState({\n                        cellValues: event.data,\n                        cellLocks: event.data.map(v => v !== undefined),\n                    });\n                }\n                this.state.worker.terminate();\n                this.setState({worker: undefined})\n            };\n\n            this.setState({worker: worker});\n        } else {\n            // stop current computation\n            this.state.worker.terminate();\n            this.setState({ worker: undefined });\n        }\n    };\n\n    /**\n     * Unset the value for all unlocked cells\n     */\n    clear() {\n        if (this.isIdle()) {\n            this.setState({\n                cellValues: this.state.cellValues.map((v, i) => this.state.cellLocks[i] ? v : undefined),\n            });\n        }\n        for (let cell of this.cells) {\n            cell.setState({\n                small: Array(9).fill(false),\n            });\n        }\n    };\n\n    render() {\n        return (\n            <div>\n            <div className=\"grid\" tabIndex=\"0\">\n                { this.state.cellValues.map((v, i) =>\n                    <Cell\n                        key={i}\n                        index={i}\n                        value={v}\n                        isLocked={this.state.cellLocks[i]}\n                        setValue={v => this.setCellValue(i, v)}\n                        ref={(input) => this.cells[i] = input}\n                    />\n                )}\n            </div>\n            <div id=\"buttons\">\n                <button onClick={() => this.generate()}>{this.isIdle() ? \"Generate\" : \"Stop\"}</button>\n                <button onClick={() => this.clear()}>Clear</button>\n                <button onClick={() => this.solve()}>{this.isIdle() ? \"Solve\" : \"Stop\"}</button>\n                <button onClick={() => this.lock()}>Lock</button>\n                <button onClick={() => this.unlock()}>Unlock</button>\n            </div>\n            </div>\n        );\n    }\n\n    setCellValue(index, value) {\n        if (!this.state.cellLocks[index]) {\n            let values = [...this.state.cellValues];\n            values[index] = value;\n            this.setState({cellValues: values});\n        }\n    }\n}\n\nconst CellHook = props => {\n    const [small, setSmall] = React.useState(Array(9).fill(false));\n\n    let pointerTimer = undefined;\n    let pointerValue = undefined;\n\n    const clearPointerTimer = () => {\n        clearTimeout(pointerTimer);\n        pointerTimer = undefined;\n    };\n\n    const onPointerDown = (event, value) => {\n        if (!props.isLocked) {\n            if (pointerTimer !== undefined) {\n                clearPointerTimer();\n            }\n            pointerTimer = setTimeout(() => {\n                console.log(pointerValue);\n                props.setValue(pointerValue);\n                clearPointerTimer();\n            }, 250);\n            pointerValue = value;\n        }\n    };\n\n    const onPointerUp = (event, value) => {\n        if (pointerTimer !== undefined) {\n            clearPointerTimer();\n            let newSmall = Array.from(small);\n            newSmall[value] = !newSmall[value];\n            setSmall(newSmall);\n        }\n    };\n\n    const onPointerLeave = (event) => clearPointerTimer();\n\n    let row = ~~(props.index / 9);\n    let col = props.index % 9;\n    let area = 3 * ~~(row / 3) + ~~(col / 3);\n    let classes = ['cell', `R${row}`, `C${col}`, `A${area}`];\n    if (props.isLocked) classes.push(\"locked\");\n    let smallNotes = [];\n    if (props.value === undefined) {\n        for (let i = 1; i <= 9; i++) {\n            smallNotes.push(\n                <div\n                    className=\"small\"\n                    onMouseDown={e => onPointerDown(e, i)}\n                    onMouseLeave={() => onPointerLeave()}\n                    onMouseUp={e => onPointerUp(e, i)}\n                    onPointerDown={e => onPointerDown(e, i)}\n                    onPointerLeave={() => onPointerLeave()}\n                    onPointerUp={e => onPointerUp(e, i)}\n                    key={i}>\n                    {small[i] ? i : \"\"}\n                </div>);\n        }\n    }\n    return (\n        <div className={classes.join(' ')}>\n            <div\n                className=\"big\"\n                onTouchStart={() => {props.setValue(undefined)}}\n                onMouseDown={() => {props.setValue(undefined)}}>\n                { props.value }\n            </div>\n            { smallNotes }\n        </div>\n    );\n};\n\nclass Cell extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            small: Array(9).fill(false),\n        };\n        this.pointerTimer = undefined;\n        this.pointerValue = undefined;\n    }\n\n    render() {\n        let row = ~~(this.props.index / 9);\n        let col = this.props.index % 9;\n        let area = 3 * ~~(row / 3) + ~~(col / 3);\n        let classes = ['cell', `R${row}`, `C${col}`, `A${area}`];\n        if (this.props.isLocked) classes.push(\"locked\");\n        let smallNotes = [];\n        if (this.props.value === undefined) {\n            for (let i = 1; i <= 9; i++) {\n                smallNotes.push(\n                    <div\n                        className=\"small\"\n                        onMouseDown={e => this.onPointerDown(e, i)}\n                        onMouseLeave={() => this.onPointerLeave()}\n                        onMouseUp={e => this.onPointerUp(e, i)}\n                        onPointerDown={e => this.onPointerDown(e, i)}\n                        onPointerLeave={() => this.onPointerLeave()}\n                        onPointerUp={e => this.onPointerUp(e, i)}\n                        // onTouchStart={e => this.onPointerDown(e, i)}\n                        // onTouchEnd={e => this.onPointerUp(e, i)}\n                        key={i}>\n                        {this.state.small[i] ? i : \"\"}\n                    </div>);\n            }\n        }\n        return (\n            <div className={classes.join(' ')}>\n                <div\n                    className=\"big\"\n                    onTouchStart={() => {this.props.setValue(undefined)}}\n                    onMouseDown={() => {this.props.setValue(undefined)}}>\n                    { this.props.value }\n                </div>\n                { smallNotes }\n            </div>\n        );\n    }\n\n    clearPointerTimer() {\n        clearTimeout(this.pointerTimer);\n        this.pointerTimer = undefined;\n    }\n\n    onPointerDown(event, value) {\n        if (!this.props.isLocked) {\n            if (this.pointerTimer !== undefined) {\n                this.clearPointerTimer();\n            }\n            this.pointerTimer = setTimeout(() => {\n                console.log(this.pointerValue);\n                this.props.setValue(this.pointerValue);\n                this.clearPointerTimer();\n            }, 250);\n            this.pointerValue = value;\n        }\n    }\n\n    onPointerUp(event, value) {\n        if (this.pointerTimer !== undefined) {\n            this.clearPointerTimer();\n            let small = Array.from(this.state.small);\n            small[value] = !small[value];\n            this.setState({small: small});\n        }\n    }\n\n    onPointerLeave(event) {\n        this.clearPointerTimer();\n    }\n}\n\nwindow.oncontextmenu = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    return false;\n};\n\ndocument.addEventListener(\"keydown\", event => { pressedKeys.add(event.key); });\ndocument.addEventListener(\"keyup\", event => { pressedKeys.delete(event.key); });\n\nReactDOM.render(\n    <SudokuGridHook />,\n    document.getElementById('app')\n);\n\n"]}