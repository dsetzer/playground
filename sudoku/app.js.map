{"version":3,"sources":["app.jsx"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["let pressedKeys = new Set();\n\nclass SudokuGrid extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cellValues: Array(81).fill(undefined),\n            cellLocks: Array(81).fill(false),\n            shouldClearSmall: false,\n            worker: undefined,\n        };\n        this.cells = [];\n    }\n\n    isIdle() {\n        return this.state.worker === undefined;\n    }\n\n    /**\n     * Mark all cells that have a value as locked\n     */\n    lock() {\n        this.setState({\n            cellLocks: this.state.cellValues.map(v => v !== undefined),\n        });\n    }\n\n    /**\n     * Mark all cells as unlocked\n     */\n    unlock() {\n        this.setState({\n            cellLocks: Array(81).fill(false),\n        });\n    }\n\n    /**\n     * Solve the grid with current values\n     * This method calls a Webworker in the background to run the search algorithm\n     */\n    solve() {\n        if (this.isIdle()) {\n            // start a new computation with a webworker\n            let worker = new Worker('./solver.js');\n            worker.postMessage({\n                command: \"solve\",\n                values: this.state.cellValues});\n\n            worker.onmessage = event => {\n                if (event.data !== undefined) {\n                    this.setState({\n                        cellValues: event.data,\n                    });\n                }\n                this.state.worker.terminate();\n                this.setState({ worker: undefined })\n            };\n            this.setState({ worker: worker });\n        } else {\n            // stop current computation\n            this.state.worker.terminate();\n            this.setState({ worker: undefined });\n        }\n    };\n\n    /**\n     * Solve the grid with current values\n     * This method calls a Webworker in the background to run the search algorithm\n     */\n    generate() {\n        if (this.isIdle()) {\n            // start a new computation with a webworker\n            let worker = new Worker('./solver.js');\n            worker.postMessage({\n                command: \"generate\"});\n\n            worker.onmessage = event => {\n                if (event.data !== undefined) {\n                    this.setState({\n                        cellValues: event.data,\n                        cellLocks: event.data.map(v => v !== undefined),\n                    });\n                }\n                this.state.worker.terminate();\n                this.setState({worker: undefined})\n            };\n\n            this.setState({worker: worker});\n        } else {\n            // stop current computation\n            this.state.worker.terminate();\n            this.setState({ worker: undefined });\n        }\n    };\n\n    /**\n     * Unset the value for all unlocked cells\n     */\n    clear() {\n        if (this.isIdle()) {\n            this.setState({\n                cellValues: this.state.cellValues.map((v, i) => this.state.cellLocks[i] ? v : undefined),\n            });\n        }\n        for (let cell of this.cells) {\n            cell.setState({\n                small: Array(9).fill(false),\n            });\n        }\n    };\n\n    render() {\n        return (\n            <div>\n            <div className=\"grid\" tabIndex=\"0\">\n                { this.state.cellValues.map((v, i) =>\n                    <Cell\n                        key={i}\n                        index={i}\n                        value={v}\n                        isLocked={this.state.cellLocks[i]}\n                        setValue={v => this.setCellValue(i, v)}\n                        ref={(input) => this.cells[i] = input}\n                    />\n                )}\n            </div>\n            <div id=\"buttons\">\n                <button onClick={() => this.generate()}>{this.isIdle() ? \"Generate\" : \"Stop\"}</button>\n                <button onClick={() => this.clear()}>Clear</button>\n                <button onClick={() => this.solve()}>{this.isIdle() ? \"Solve\" : \"Stop\"}</button>\n                <button onClick={() => this.lock()}>Lock</button>\n                <button onClick={() => this.unlock()}>Unlock</button>\n            </div>\n            </div>\n        );\n    }\n\n    setCellValue(index, value) {\n        if (!this.state.cellLocks[index]) {\n            let values = [...this.state.cellValues];\n            values[index] = value;\n            this.setState({cellValues: values});\n        }\n    }\n}\n\nclass Cell extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            small: Array(9).fill(false),\n        };\n        this.pointerTimer = undefined;\n        this.pointerValue = undefined;\n    }\n\n    render() {\n        let row = ~~(this.props.index / 9);\n        let col = this.props.index % 9;\n        let area = 3 * ~~(row / 3) + ~~(col / 3);\n        let classes = ['cell', `R${row}`, `C${col}`, `A${area}`];\n        if (this.props.isLocked) classes.push(\"locked\");\n        let smallNotes = [];\n        if (this.props.value === undefined) {\n            for (let i = 1; i <= 9; i++) {\n                smallNotes.push(\n                    <div\n                        className=\"small\"\n                        onMouseDown={e => this.onPointerDown(e, i)}\n                        onMouseLeave={() => this.onPointerLeave()}\n                        onMouseUp={e => this.onPointerUp(e, i)}\n                        onTouchStart={e => this.onPointerDown(e, i)}\n                        onTouchEnd={e => this.onPointerUp(e, i)}\n                        key={i}>\n                        {this.state.small[i] ? i : \"\"}\n                    </div>);\n            }\n        }\n        return (\n            <div className={classes.join(' ')}>\n                <div\n                    className=\"big\"\n                    onTouchStart={() => {this.props.setValue(undefined)}}\n                    onMouseDown={() => {this.props.setValue(undefined)}}>\n                    { this.props.value }\n                </div>\n                { smallNotes }\n            </div>\n        );\n    }\n\n    clearPointerTimer() {\n        clearTimeout(this.pointerTimer);\n        this.pointerTimer = undefined;\n    }\n\n    onPointerDown(event, value) {\n        if (!this.props.isLocked) {\n            if (this.pointerTimer !== undefined) {\n                this.clearPointerTimer();\n            }\n            this.pointerTimer = setTimeout(() => {\n                console.log(this.pointerValue);\n                this.props.setValue(this.pointerValue);\n                this.clearPointerTimer();\n            }, 500);\n            this.pointerValue = value;\n        }\n    }\n\n    onPointerUp(event, value) {\n        if (this.pointerTimer !== undefined) {\n            this.clearPointerTimer();\n            let small = Array.from(this.state.small);\n            small[value] = !small[value];\n            this.setState({small: small});\n        }\n    }\n\n    onPointerLeave(event) {\n        this.clearPointerTimer();\n    }\n}\n\nwindow.oncontextmenu = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    return false;\n};\n\ndocument.addEventListener(\"keydown\", event => { pressedKeys.add(event.key); });\ndocument.addEventListener(\"keyup\", event => { pressedKeys.delete(event.key); });\n\nReactDOM.render(\n    <SudokuGrid />,\n    document.getElementById('app')\n);\n\n"]}