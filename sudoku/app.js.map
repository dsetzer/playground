{"version":3,"sources":["app.jsx"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["let pressedKeys = new Set();\n\nconst SudokuGrid = () => {\n    // An array of 81 values in [1, 9] indicating the value in a cell, or undefined if the cell is empty\n    const [cellValues, setCellValues] = React.useState(Array(81).fill(undefined));\n\n    let annotations = Array(81);\n    for (let i = 0; i < 81; i++) {\n        annotations[i] = Array(9).fill(false);\n    }\n    // An array of 81 values containing for each cell an array of 9 booleans indicating which value annotations are\n    // set\n    const [cellAnnotations, setCellAnnotations] = React.useState(annotations);\n    // An arrat of 81 booleans indicating whether each cell is locked (true) or not (false)\n    const [cellLocks, setCellLocks] = React.useState(Array(81).fill(false));\n    // The current active worker, or undefined if not currently solving\n    const [worker, setWorker] = React.useState(undefined);\n\n    /**\n     * Return whether the app is idle (no worker currently solving) or not\n     * @returns {boolean} true if there is an acitve worker, false otherwise\n     */\n    const isIdle = () => worker === undefined;\n\n    /**\n     * Lock all cells that currently have a value set\n     */\n    const lock = () => setCellLocks(cellValues.map(v => v !== undefined));\n\n    /**\n     * Unlock all cells\n     */\n\n    const unlock = () => setCellLocks(Array(81).fill(false));\n\n    /**\n     * Solve the grid with current values\n     * This method calls a webworker in the background to run the search algorithm\n     */\n    const solve = () => {\n        if (isIdle()) {\n            // start a new computation with a webworker\n            let newWorker = new Worker('solver.js');\n            newWorker.postMessage({command: \"solve\", values: cellValues});\n\n            newWorker.onmessage = event => {\n                if (event.data !== undefined) {\n                    setCellValues(event.data);\n                }\n                newWorker.terminate();\n                setWorker(undefined);\n            };\n            setWorker(newWorker);\n        } else {\n            // stop current computation\n            worker.terminate();\n            setWorker(undefined);\n        }\n    };\n\n    /**\n     * Generate a new Sudoku grid\n     * The generated grid has a single solution and all given values are necessary\n     */\n    const generate = () => {\n        if (isIdle()) {\n            // start a new computation with a webworker\n            let newWorker = new Worker('./solver.js');\n            newWorker.postMessage({command: \"generate\"});\n            setWorker(newWorker);\n\n            newWorker.onmessage = event => {\n                if (event.data !== undefined) {\n                    setCellValues(event.data);\n                    setCellLocks(event.data.map(v => v !== undefined));\n                }\n                newWorker.terminate();\n                setWorker(undefined);\n            };\n        } else {\n            // stop current computation\n            worker.terminate();\n            setWorker(undefined);\n        }\n    };\n\n    /**\n     * Unset the value for all unlocked cells, and clear all annotations\n     */\n    const clear = () => {\n        if (isIdle()) {\n            setCellValues(cellValues.map((v, i) => cellLocks[i] ? v : undefined));\n            let annotations = Array(81);\n            for (let i = 0; i < 81; i++) {\n                annotations[i] = Array(9).fill(false);\n            }\n            setCellAnnotations(annotations);\n        }\n    };\n\n    /**\n     * Change the value of a given cell\n     * @param index {number} the index of the cell to change\n     * @param value {number} the value of the cell (undefined to unset the cell)\n     */\n    const changeCellValue = (index, value) => {\n        if (!cellLocks[index]) {\n            let values = [...cellValues];\n            values[index] = value;\n            setCellValues(values);\n        }\n    };\n\n    /**\n     * Toggles one of the annotations of a cell\n     * @param index {number} index of the cell\n     * @param value {number} value of the annotation to toggle\n     */\n    const toggleAnnotation = (index, value) => {\n        if (!cellLocks[index]) {\n            let annotations = [...cellAnnotations];\n            annotations[index][value] = !annotations[index][value];\n            setCellAnnotations(annotations);\n        }\n    };\n\n    return (\n        <div>\n            <div className=\"grid\" tabIndex=\"0\">\n                { cellValues.map((v, i) =>\n                    <Cell\n                        key={i}\n                        index={i}\n                        value={v}\n                        annotations={cellAnnotations[i]}\n                        isLocked={cellLocks[i]}\n                        setValue={v => changeCellValue(i, v)}\n                        toggleAnnotation={v => toggleAnnotation(i, v)}\n                    />\n                )}\n            </div>\n            <div id=\"buttons\">\n                <button onClick={generate}>{isIdle() ? \"Generate\" : \"Stop\"}</button>\n                <button onClick={clear}>Clear</button>\n                <button onClick={solve}>{isIdle() ? \"Solve\" : \"Stop\"}</button>\n                <button onClick={lock}>Lock</button>\n                <button onClick={unlock}>Unlock</button>\n            </div>\n        </div>\n    );\n};\n\nconst Cell = props => {\n    let pointerTimer = undefined;\n    let pointerValue = undefined;\n\n    const clearPointerTimer = () => {\n        clearTimeout(pointerTimer);\n        pointerTimer = undefined;\n    };\n\n    const onPointerDown = (event, value) => {\n        if (!props.isLocked) {\n            if (pointerTimer !== undefined) {\n                clearPointerTimer();\n            }\n            pointerTimer = setTimeout(() => {\n                console.log(pointerValue);\n                props.setValue(pointerValue);\n                clearPointerTimer();\n            }, 250);\n            pointerValue = value;\n        }\n    };\n\n    const onPointerUp = (event, value) => {\n        if (pointerTimer !== undefined) {\n            clearPointerTimer();\n            props.toggleAnnotation(value);\n        }\n    };\n\n    const onPointerLeave = (event) => clearPointerTimer();\n\n    let row = ~~(props.index / 9);\n    let col = props.index % 9;\n    let area = 3 * ~~(row / 3) + ~~(col / 3);\n    let classes = ['cell', `R${row}`, `C${col}`, `A${area}`];\n    if (props.isLocked) classes.push(\"locked\");\n    let annotations = [];\n    if (props.value === undefined) {\n        for (let i = 1; i <= 9; i++) {\n            annotations.push(\n                <div\n                    className=\"small\"\n                    onMouseDown={e => onPointerDown(e, i)}\n                    onMouseLeave={() => onPointerLeave()}\n                    onMouseUp={e => onPointerUp(e, i)}\n                    onPointerDown={e => onPointerDown(e, i)}\n                    onPointerLeave={() => onPointerLeave()}\n                    onPointerUp={e => onPointerUp(e, i)}\n                    key={i}>\n                    {props.annotations[i] ? i : \"\"}\n                </div>);\n        }\n    }\n    return (\n        <div className={classes.join(' ')}>\n            <div\n                className=\"big\"\n                onTouchStart={() => {props.setValue(undefined)}}\n                onMouseDown={() => {props.setValue(undefined)}}>\n                { props.value }\n            </div>\n            { annotations }\n        </div>\n    );\n};\n\nwindow.oncontextmenu = function(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    return false;\n};\n\ndocument.addEventListener(\"keydown\", event => { pressedKeys.add(event.key); });\ndocument.addEventListener(\"keyup\", event => { pressedKeys.delete(event.key); });\n\nReactDOM.render(\n    <SudokuGrid />,\n    document.getElementById('app')\n);\n\n"]}