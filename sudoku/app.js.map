{"version":3,"sources":["app.jsx"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["class Sudoku extends React.Component {\n    constructor(props) {\n        super(props);\n        let cells = [];\n        for (let i = 0; i < 81; i++) {\n            cells.push({\n                value: undefined,\n            });\n        }\n\n        this.state = {\n            cells: cells,\n            focusIndex: undefined,\n            worker: undefined,\n        }\n    }\n\n    isIdle() {\n        return this.state.worker === undefined;\n    }\n\n    /**\n     * Mark all cells that have a value as locked\n     */\n    lock() {\n        for (let cell of this.state.cells) {\n            cell.isLocked = cell.value !== undefined;\n        }\n        this.forceUpdate();\n    }\n\n    /**\n     * Mark all cells as unlocked\n     */\n    unlock() {\n        for (let cell of this.state.cells) {\n            cell.isLocked = false;\n        }\n        this.forceUpdate();\n    }\n\n    /**\n     * Solve the grid with current values\n     * This method calls a Webworker in the background to run the search algorithm\n     */\n    solve() {\n        if (this.state.worker !== undefined) {\n            // stop current computation\n            this.state.worker.terminate();\n            this.setState({ worker: undefined });\n        } else {\n            // start a new computation with a webworker\n            let worker = new Worker('./solver.js');\n            worker.postMessage({\n                command: \"solve\",\n                values: this.state.cells.map(c => c.value)});\n\n            worker.onmessage = event => {\n                if (event.data !== undefined) {\n                    event.data.map((v, i) => this.state.cells[i].value = v);\n                }\n                this.state.worker.terminate();\n                this.setState({ worker: undefined })\n            };\n            this.setState({ worker: worker });\n        }\n    };\n\n    /**\n     * Solve the grid with current values\n     * This method calls a Webworker in the background to run the search algorithm\n     */\n    generate() {\n        if (this.state.worker !== undefined) {\n            // stop current computation\n            this.state.worker.terminate();\n            this.setState({ worker: undefined });\n        } else {\n            // start a new computation with a webworker\n            let worker = new Worker('./solver.js');\n            worker.postMessage({command: \"generate\"});\n\n            worker.onmessage = event => {\n                if (event.data !== undefined) {\n                    event.data.map((v, i) => this.state.cells[i].value = v);\n                }\n                for (let cell of this.state.cells) {\n                    cell.isLocked = cell.value !== undefined;\n                }\n                this.state.worker.terminate();\n                this.setState({ worker: undefined })\n            };\n            this.setState({ worker: worker });\n        }\n    };\n\n    /**\n     * Unset the value for all unlocked cells\n     */\n    clear() {\n        if (this.isIdle()) {\n            for (let cell of this.state.cells) {\n                if (!cell.isLocked) cell.value = undefined;\n            }\n            this.forceUpdate();\n        }\n    };\n\n    /**\n     * React to a click on a cell\n     * (toggle focus on the cell)\n     *\n     * @param {number} index the index of the clicked cell\n     */\n    clickCell(index) {\n        this.setState({\n            focusIndex: this.state.focusIndex === index ? undefined : index\n        });\n    }\n\n    /**\n     * React to keyboard events:\n     * - A number (1-9) sets the value of the focused cell\n     * - Backspace removes the value of the focused cell\n     * - Arrow keys move focus to neighbor cells\n     * - Escape removes the focus\n     *\n     * @param {KeyboardEvent} event the keyboard event\n     */\n    handleKeyDown(event) {\n        event.preventDefault();\n        const focusIndex = this.state.focusIndex;\n        if (focusIndex !== undefined) {\n            const focusCell = this.state.cells[focusIndex];\n            let newFocusIndex = undefined;\n            switch (event.key) {\n                case \"1\":\n                case \"2\":\n                case \"3\":\n                case \"4\":\n                case \"5\":\n                case \"6\":\n                case \"7\":\n                case \"8\":\n                case \"9\":\n                    if (this.isIdle() && !focusCell.isLocked) {\n                        focusCell.value = Number(event.key);\n                        this.forceUpdate();\n                    }\n                    break;\n                case \"Backspace\":\n                    if (this.isIdle() && !focusCell.isLocked) {\n                        focusCell.value = undefined;\n                        this.forceUpdate();\n                    }\n                    break;\n                case \"ArrowUp\":\n                    newFocusIndex = focusIndex - 9;\n                    break;\n                case \"ArrowDown\":\n                    newFocusIndex = focusIndex + 9;\n                    break;\n                case \"ArrowLeft\":\n                    newFocusIndex = focusIndex - 1;\n                    break;\n                case \"ArrowRight\":\n                    newFocusIndex = focusIndex + 1;\n                    break;\n                case \"Escape\":\n                    this.setState({ focusIndex: undefined });\n                    break;\n            }\n            if (0 <= newFocusIndex && newFocusIndex < 81) {\n                this.setState({ focusIndex: newFocusIndex });\n            }\n        }\n    }\n\n    render() {\n        const hasFocus = this.state.focusIndex !== undefined;\n\n        return (\n            <div>\n            <div className=\"grid\" tabIndex=\"0\" onKeyDown={this.handleKeyDown.bind(this)}>\n                { this.state.cells.map((c, i) =>\n                    <Cell\n                        key={i}\n                        index={i}\n                        value={c.value}\n                        isFocused={i === this.state.focusIndex}\n                        isHighlighted={\n                            hasFocus &&\n                            (i % 9 === this.state.focusIndex % 9 ||\n                            ~~(i / 9) === ~~(this.state.focusIndex / 9))}\n                        isLocked={c.isLocked}\n                        onClick={() => this.clickCell(i)}\n                    />\n                )}\n            </div>\n            <div id=\"buttons\">\n                <button onClick={() => this.generate()}>{this.state.worker === undefined ? \"Generate\" : \"Stop\"}</button>\n                <button onClick={() => this.clear()}>Clear</button>\n                <button onClick={() => this.solve()}>{this.state.worker === undefined ? \"Solve\" : \"Stop\"}</button>\n                <button onClick={() => this.lock()}>Lock</button>\n                <button onClick={() => this.unlock()}>Unlock</button>\n            </div>\n            </div>\n        );\n    }\n}\n\nclass Cell extends React.Component {\n    render() {\n        let row = ~~(this.props.index / 9);\n        let col = this.props.index % 9;\n        let area = 3 * ~~(row / 3) + ~~(col / 3);\n        let classes = ['cell', `R${row}`, `C${col}`, `A${area}`];\n        if (this.props.isFocused) classes.push(\"focused\");\n        if (this.props.isLocked) classes.push(\"locked\");\n        if (this.props.isHighlighted) classes.push(\"highlighted\");\n        return (\n            <div className={classes.join(' ')} onClick={this.props.onClick}>\n                { this.props.value }\n            </div>\n        )\n    }\n}\n\nReactDOM.render(\n    <Sudoku />,\n    document.getElementById('app')\n);\n\n"]}